#### Function ####
### function: take response of multi-page Textract, and page_number
### return order sequence JSON for that page Text1->KV/Table->Text2->KV/Table..
def parsejson_inorder_perpage(response,thisPage):
# input: response - multipage Textract response JSON
#        thisPage - page number : 1,2,3.. 
# output: clean parsed JSON for this Page in correct order 
        TextList=[]
        ID_list_KV_Table=[]
        Frac_Stage_Bad_KVs=[]
        key_map = {}
        block_map = {}
        eliminate_block=False
        frac_stages = []
        for block in response['Blocks']:
            if block['Page'] == thisPage:
                block_id = block['Id']
                block_map[block_id] = block
               
                if block['BlockType']=='TABLE' or block['BlockType']=='CELL' or \
                   block['BlockType']=='KEY_VALUE_SET' or block['BlockType']=='KEY' or block['BlockType']=='VALUE' or  \
                   block['BlockType']=='SELECTION_ELEMENT' :
                    if block['BlockType']=='KEY_VALUE_SET' or block['BlockType']=='KEY' or block['BlockType']=='VALUE':
                        if 'KEY' in block['EntityTypes']:
                            key_map[block_id] = block
    
                        for block_id, key_block in key_map.items():
                            key = get_text(key_block, block_map)
                            
                            if not re.match('Frac Stage [0-9]* ', key):
                                kv_id=block['Id']
                            else:
                                Frac_Stage_Bad_KVs.append(kv_id)
                                eliminate_block=True
                                print("Found a match!!! on page ", thisPage, " with key ", kv_id)
                                
                    elif block['BlockType']=='TABLE' or block['BlockType']=='CELL' or \
                         block['BlockType']=='SELECTION_ELEMENT' :
                        kv_id=block['Id']

                    if kv_id not in ID_list_KV_Table:
                        if kv_id not in Frac_Stage_Bad_KVs:
                            ID_list_KV_Table.append(kv_id)

                    child_idlist=[]
                    if not eliminate_block:
                        if 'Relationships' in block.keys():
                            for child in block['Relationships']:
                                child_idlist.append(child['Ids'])
                            flat_child_idlist = [item for sublist in child_idlist for item in sublist]
                            for childid in flat_child_idlist:
                                if childid not in ID_list_KV_Table:
                                    ID_list_KV_Table.append(childid)

        TextList=[]
        for block in response['Blocks']:
            if block['Page'] == thisPage:
                if block['BlockType'] == 'LINE':
                    if re.match('Frac Stage [0-9]* ', block['Text']):
                            print('Found frac stages ', block['Text']) 
                            
                    thisline_idlist=[]
                    thisline_idlist.append(block['Id'])
                    thisline_idtext=[]
                    thisline_idtext.append(block['Text'])
                    
                    if not re.match('Frac Stage [0-9]* ', block['Text']):
                        child_idlist=[]
                        if 'Relationships' in block.keys():
                            for child in block['Relationships']:
                                child_idlist.append(child['Ids'])
                            flat_child_idlist = [item for sublist in child_idlist for item in sublist]
                            for childid in flat_child_idlist:
                                thisline_idlist.append(childid)

                    setLineID=set(thisline_idlist)
                       
                    setAllKVTableID=set(ID_list_KV_Table)
                    
                    for txt in thisline_idtext:
                        if re.match('Frac Stage [0-9]* ', txt):
                            print('Found frac stages 2', txt) 
                            block_id = thisline_idlist[thisline_idtext.index(txt)]
                            print("Block Id ", block_id)
                            print(block_id in setAllKVTableID)
                            print("Length of intersection is ", len(setLineID.intersection(setAllKVTableID)))
                            
                    if len(setLineID.intersection(setAllKVTableID)) == 0:
                        if re.match('Frac Stage [0-9]* ', block['Text']):
                            frac_stages.append(block['Text'])
                            print('Found frac stages 3', block['Text'])
                            
                        thisDict={'Line':block['Text'],
                                  'Left':block['Geometry']['BoundingBox']['Left'],
                                  'Top':block['Geometry']['BoundingBox']['Top'],
                                  'Width':block['Geometry']['BoundingBox']['Width'],
                                  'Height':block['Geometry']['BoundingBox']['Height']}
                        TextList.append(thisDict)

        finalJSON=[]
        for i in range(len(TextList)-1):
            thisText=TextList[i]['Line']
            thisTop=TextList[i]['Top']
            thisBottom=TextList[i+1]['Top']+TextList[i+1]['Height']
 #           thisText_KV=find_Key_value_inrange_notInTable(response,thisTop,thisBottom,thisPage)
            thisText_KV=find_Key_value_inrange(response,thisTop,thisBottom,thisPage)
            thisText_Table=get_tables_fromJSON_inrange(response,thisTop,thisBottom,thisPage)
            finalJSON.append({thisText:{'KeyValue':thisText_KV,'Tables':thisText_Table}})

        if (len(TextList) > 0):
            ## last line Text to bottom of page:
            lastText=TextList[len(TextList)-1]['Line']
            lastTop=TextList[len(TextList)-1]['Top']
            lastBottom=1
     #       thisText_KV=find_Key_value_inrange_notInTable(response,lastTop,lastBottom,thisPage)
            thisText_KV=find_Key_value_inrange(response,lastTop,lastBottom,thisPage)
            thisText_Table=get_tables_fromJSON_inrange(response,lastTop,lastBottom,thisPage)
            finalJSON.append({lastText:{'KeyValue':thisText_KV,'Tables':thisText_Table}})

        return finalJSON, list(OrderedDict.fromkeys(frac_stages))
        
   ### New DynamoDB Table ###
   def _writeMetadataToDynamoDB(Id, fullFilePath, fullPdfJson, fracStages):

    # Get the service resource.
    dynamodb = getResource('dynamodb')
    dynamodb_client = getClient('dynamodb')
    
    dd_table_name = 'XTODAMetadata'
    
    # Create the DynamoDB table.
    try:
        
        existing_tables = list([x.name for x in dynamodb.tables.all()])

        # existing_tables = dynamodb_client.list_tables()['TableNames']

        if dd_table_name not in existing_tables:
            table = dynamodb.create_table(
                TableName=dd_table_name,
                KeySchema=[
                    {
                        'AttributeName': 'Id',
                        'KeyType': 'HASH'
                    }
                ],
                AttributeDefinitions=[
                    {
                        'AttributeName': 'Id',
                        'AttributeType': 'S'
                    },
                ],
                BillingMode='PAY_PER_REQUEST',
            )
            # Wait until the table exists, this will take a minute or so
            table.meta.client.get_waiter('table_exists').wait(TableName=dd_table_name)
            # Print out some data about the table.
            print("Table successfully created. Item count is: " + str(table.item_count))
    # except dynamodb_client.exceptions.ResourceInUseException:
    except ClientError as e:
        if e.response['Error']['Code'] in ["ThrottlingException", "ProvisionedThroughputExceededException"]:
            msg = f"DynamoDB ] Write Failed from DynamoDB, Throttling Exception [{e}] [{traceback.format_exc()}]"
            logging.warning(msg)
            raise e
        else:
            msg = f"DynamoDB Write Failed from DynamoDB Exception [{e}] [{traceback.format_exc()}]"
            logging.error(msg)
            raise e

    except Exception as e:
         msg = f"DynamoDB Write Failed from DynamoDB Exception [{e}] [{traceback.format_exc()}]"
         logging.error(msg)
         raise Exception(e)
    
    table = dynamodb.Table(dd_table_name)
    
    try :
        metadata = _getMetadataFromFullPath(fullFilePath)
        for fracStage in fracStages:
            table.put_item(Item=
                {
                    'Id': str(uuid.uuid4()), 
                    'WellName': metadata['WellName'], 
                    'FracStage': str(fracStage),
                    'FileDate': metadata['FileDate'],
                    'FileFullPath': fullFilePath
                }
            )
    except ClientError as e:
        if e.response['Error']['Code'] in ["ThrottlingException", "ProvisionedThroughputExceededException"]:
            msg = f"DynamoDB ] Write Failed from DynamoDB, Throttling Exception [{e}] [{traceback.format_exc()}]"
            logging.warning(msg)
            raise e

        else:
            msg = f"DynamoDB Write Failed from DynamoDB Exception [{e}] [{traceback.format_exc()}]"
            logging.error(msg)
            raise e

    except Exception as e:
        msg = f"DynamoDB Write Failed from DynamoDB Exception [{e}] [{traceback.format_exc()}]"
        logging.error(msg)
        raise Exception(e)
        
        
        
   ## Loop ####
   final_frac_stages=[]
    print(Total_Pages)
    for i in range(Total_Pages):
        thisPage=i+1
        thisPage_json, frac_stages = parsejson_inorder_perpage(analysis,thisPage)
        finalJSON_allpage.append({'Page':thisPage,'Content':thisPage_json})
        final_frac_stages += frac_stages
        print(f"Page {thisPage} parsed")
        
